#!/bin/bash
set > old_vars.log

APPNAME="archboot"
VERSION="v3.0.0"
BRANCH="master"
AUTHOR="grm34"
LICENSE="Apache License 2.0"

### Description (Описание)
_archboot_banner() {
    echo -e "${BLUE}
┌─┐┬─┐┌─┐┬ ┬┌┐ ┌─┐┌─┐┌┬┐  ┌─┐┬─┐┌─┐┬ ┬  ┬┌┐┌┌─┐┌┬┐┌─┐┬  ┬  ┌─┐┬─┐
├─┤├┬┘│  ├─┤├┴┐│ ││ │ │   ├─┤├┬┘│  ├─┤  ││││└─┐ │ ├─┤│  │  ├┤ ├┬┘
┴ ┴┴└─└─┘┴ ┴└─┘└─┘└─┘ ┴   ┴ ┴┴└─└─┘┴ ┴  ┴┘└┘└─┘ ┴ ┴ ┴┴─┘┴─┘└─┘┴└─${RED}
 Arch Linux Installer ${VERSION} - A script made with love by ${AUTHOR}
${NC}
  Arch Linux-это легкий и быстрый дистрибутив, концепция которого такова:
оставаться настолько простым, насколько это возможно. С той же целью и в
для того чтобы предоставить пользователю свободный выбор, этот скрипт выполняет
минимальная установка и только необходимые пакеты будут
установленный. Довольно простой и настраиваемый, некоторые опции являются
поддерживается как Aur Helper, ядро linux, драйвер GPU, окно
менеджер или среда рабочего стола. По словам избранного
а для того чтобы получить полную поддержку могут потребоваться дополнительные пакеты
требоваться. Для получения дополнительной информации о archboot см. wiki.\n"
}

### Help and usage (--help or -h) (Справка)
_help() {
    echo -e "${BLUE}
Arch Linux Installer - A script made with love by ${AUTHOR}

${BOLD}Usage: ${NC}sh ${APPNAME} [options]

    ${BOLD}Options${NC}
        -h, --help          show this help message
        -l, --lang          set installer language
        -k, --keyboard      set keyboard layout

    ${BOLD}Language${NC}
        -l, --lang          english
                            french
                            german      (by @At1768)
                            russian

    ${BOLD}Keyboard${NC}
        -k, --keyboard      keyboard layout
                            (run loadkeys on start)
                            (e.q., --keyboard fr)

${BOLD}For more information, see the wiki: \
${GREY}<http://tiny.cc/archboot-wiki>${NC}"
}

#                     SHARED VARIABLES AND FUNCTIONS  (ОБЩИЕ ПЕРЕМЕННЫЕ И ФУНКЦИИ)
# ============================================================================
# Here we define all required variables and functions to manage archboot.
# Guideline: functions always start with '_' and vars are always UPPERCASE.
#
# - Variables are pretty simple such as define script language, shell colors,
#   required urls or error messages (required when locale vars unsourced).
#
# - Functions are used to handle install steps, notes, errors or to do some
#   actions like cleanup after fatal error, execute command(s) in chrooted
#   environment, select an option or to ask some information to the user.
# ============================================================================
# Здесь мы определяем все необходимые переменные и функции для управления archboot.
# Guideline: функции всегда начинаются с '_', а vars всегда прописные.
#
# - Переменные довольно просты, такие как определение языка скрипта, цвета оболочки,
# # обязательные URL-адреса или сообщения об ошибках (обязательные, когда локальные vars не обслуживаются).
#
# - Функции используются для обработки шагов установки, заметок, ошибок или для выполнения некоторых действий.
# такие действия, как очистка после фатальной ошибки, выполните команду (ы) в chrooted
# environment, выберите опцию или задайте некоторую информацию пользователю.
# ============================================================================

### Installer default language (Язык установки по умолчанию)
ARCHBOOT_LANG="russian"

### Default error msg (required when locale vars unsourced) 
### (Сообщение об ошибке по умолчанию (требуется при непроверенные язык Варс ))
MSG_ERROR="you must reboot to prevent unreconized system changes."
MSG_ERROR_GIT="do not run archboot from git repository folder!"
MSG_KEYBOARD="keyboard interrupt!"
MSG_CLEANUP="Cleaning up sources"

### Shell color codes (Цветовые коды оболочки)
RED="\e[1;31m"; GREEN="\e[1;32m"; YELLOW="\e[1;33m"; GREY="\e[3;93m"
BLUE="\e[1;34m"; CYAN="\e[1;36m"; BOLD="\e[1;37m"; MAGENTA="\e[1;35m"; NC="\e[0m"

### Urls (current branch, gh-pages, AUR Helper, mirrors, grub theme, ipinfo)
### URL-адреса (текущей ветки, гр-страниц, помощник аур, зеркала, grub тема, сайт ipinfo)
### Current branch url (Текущий URL ветки)
#export URL="https://raw.githubusercontent.com/${AUTHOR}/${APPNAME}/${BRANCH}"
URL="https://raw.githubusercontent.com/MarcMilany/archboot_ru/${BRANCH}"
### Github pages url (URL страницы Github)
#export GHPAGES=\
"https://raw.githubusercontent.com/${AUTHOR}/${APPNAME}/gh-pages"
GHPAGES=\
"https://raw.githubusercontent.com/MarcMilany/archboot_ru/gh-pages"

# Github url: $ _url для источников и $ _gh_pages для изображений
#_url = " https://raw.githubusercontent.com/grm34/archboot/ $ {__ branch__} "
#_gh_pages = " https://raw.githubusercontent.com/grm34/archboot/gh-pages "

### Display some notes (Дисплей некоторые заметки)
_note() {
    echo -e "${RED}\nNote: ${BLUE}${1}${NC}"
}

### Display install steps (Отображение шагов установки)
_info() {
    echo -e "${YELLOW}\n==> ${CYAN}${1}...${NC}"; sleep 2
}

### Ask some information (Спросите немного информации)
_prompt() {
    LENTH=${*}; COUNT=${#LENTH}
    echo -ne "\n${YELLOW}==> ${GREEN}${1} ${RED}${2}"
    echo -ne "${YELLOW}\n==> "
    for (( CHAR=1; CHAR<=COUNT; CHAR++ )); do echo -ne "-"; done
    echo -ne "\n==> ${NC}"
}

### Ask confirmation (Yes/No) (Запросите подтверждение (да / нет))
_confirm() {
    unset CONFIRM; COUNT=$(( ${#1} + 6 ))
    until [[ ${CONFIRM} =~ ^(y|n|Y|N|yes|no|Yes|No|YES|NO)$ ]]; do
        echo -ne "${YELLOW}\n==> ${GREEN}${1} ${RED}[y/n]${YELLOW}\n==> "
        for (( CHAR=1; CHAR<=COUNT; CHAR++ )); do echo -ne "-"; done
        echo -ne "\n==> ${NC}"
        read -r CONFIRM
    done
}

### Select an option (Выбрать параметр)
_select() {
    COUNT=0
    echo -ne "${YELLOW}\n==> "
    for ENTRY in "${@}"; do
        echo -ne "${RED}[$(( ++COUNT ))] ${GREEN}${ENTRY} ${NC}"
    done
    LENTH=${*}; NUMBER=$(( ${#*} * 4 ))
    COUNT=$(( ${#LENTH} + NUMBER + 1 ))
    echo -ne "${YELLOW}\n==> "
    for (( CHAR=1; CHAR<=COUNT; CHAR++ )); do echo -ne "-"; done
    echo -ne "\n==> ${NC}"
}

### Download show progress bar only (Скачать показывать только индикатор выполнения)
_wget() {
    wget "${1}" --quiet --show-progress
}

### Execute action in chrooted environment (Выполнение действия в хромированной среде)
_chroot() {
    arch-chroot /mnt <<EOF "${1}"
EOF
}

### Check command status and exit on error (Проверьте состояние команды и завершите работу с ошибкой)
_check() {
    "${@}"
    local STATUS=$?
    if [[ ${STATUS} -ne 0 ]]; then _error "${@}"; fi
    return "${STATUS}"
}

### Display error, cleanup and kill (Ошибка отображения, очистка и убийство)
_error() {
    echo -e "\n${RED}Error: ${YELLOW}${*}${NC}"
    _note "${MSG_ERROR}"
    sleep 1; _cleanup; _exit_msg; kill -9 $$
}

### Cleanup on keyboard interrupt (Очистка при прерывании работы клавиатуры)
trap '_error ${MSG_KEYBOARD}' 1 2 3 6

### Delete sources and umount partitions (Удаление источников и размонтирование разделов)
_cleanup() {
    _info "${MSG_CLEANUP}"
    SRC=(base bootloader desktop display firmware gpu_driver mirrorlist \
mounting partitioning user desktop_apps display_apps gpu_apps system_apps \
00-keyboard.conf language loader.conf timezone xinitrc xprofile \
background.png Grub2-themes archboot* *.log english french german)

    # Sources (rm) (Источники (rm))
    for SOURCE in "${SRC[@]}"; do
        if [[ -f "${SOURCE}" ]]; then rm -rfv "${SOURCE}"; fi
    done

    # Swap (swapoff) Своп (swapoff)
    CHECK_SWAP=$( swapon -s ); if [[ ${CHECK_SWAP} ]]; then swapoff -av; fi

    # Partitions (umount) Разделы (umount)
    if mount | grep /mnt; then umount -Rfv /mnt; fi
}

### Reboot with 10s timeout (Перезагрузка с таймаутом 10 секунд)
_reboot() {
    for (( SECOND=10; SECOND>=1; SECOND-- )); do
        echo -ne "\r\033[K${GREEN}${MSG_REBOOT} ${SECOND}s...${NC}"
        sleep 1
    done
    reboot; exit 0
}

### Say goodbye (Распрощаться)
_exit_msg() {
    echo -e "\n${GREEN}<<< ${BLUE}${APPNAME} ${VERSION} ${BOLD}by \
${AUTHOR} ${RED}under ${LICENSE} ${GREEN}>>>${NC}"""
}

#                             HELP AND USAGE (ПОМОЩЬ И ИСПОЛЬЗОВАНИЕ)
# ============================================================================
# Here we manage help and usage to properly describe and run archboot.
# The only options are to select script language and to load keyboard layout.
# We prevent user argument errors by matching options before run processing.
# Здесь мы управляем справкой и использованием, чтобы правильно описать и запустить archboot.
# Единственные опции - это выбор языка скрипта и загрузка раскладки клавиатуры.
# Мы предотвращаем ошибки аргументов пользователя, сопоставляя параметры перед запуском обработки.
#
# Usage: sh archboot [options] (e.g., sh archboot -l french -k fr)
# ============================================================================

### Get arguments list (Получить список аргументов)
read -ra ARGS <<< "${@}"

### Ensure valid options (Обеспечить допустимые параметры)
if [[ ${#} == 0 || ${ARGS[0]} =~ \
^(-l$|--lang$|-h$|--help$|-k$|--keyboard$) ]]; then
    true
else
    echo -e "${RED}Error:${NC} invalid option ${ARGS[0]}"
    _help; rm -f old_vars.log; _exit_msg; exit 1
fi

### Transform long options to short ones (Преобразование длинных вариантов в короткие)
for OPTION in "${ARGS[@]}"; do
    shift
    case ${OPTION} in
        "--help") set -- "${@}" "-h"; break;;
        "--lang") set -- "${OPTION}" "-l";;
        "--keyboard") set -- "${OPTION}" "-k";;
        *) set -- "${@}" "${OPTION}"
    esac
done

### Option processing (Вариант обработки)
while getopts 'hl:k:' OPTION; do
    case ${OPTION} in

        # Help (-h, --help) (Помощь)
        h)  _help; rm -f old_vars.log; _exit_msg; exit 0;;

        # Installer language (-l, --lang) (Язык установщика)
        l)  if [[ ${OPTARG} =~ ^(russian$|english$|french$|german$) ]]; then
                ARCHBOOT_LANG="${OPTARG}"
            else
                echo -e "${RED}Error:${NC} invalid language ${OPTARG}"
                _help; rm -f old_vars.log; _exit_msg; exit 1
            fi;;

        # Keyboard layout (-k, --keyboard) (Раскладка клавиатуры)
        k)  loadkeys -q "${OPTARG}"; STATUS=$?
            if [[ ${STATUS} -ne 1 ]]; then
                export KEYMAP="${OPTARG}"
            else
                echo -e "${RED}Error:${NC} invalid keyboard layout ${OPTARG}"
                _help; rm -f old_vars.log; _exit_msg; exit 1
            fi;;

        # Missing argument (Отсутствующий аргумент)
        *)  echo -e "${RED}Error:${NC} missing argument for ${*}"
            _help; rm -f old_vars.log; _exit_msg; exit 1
    esac
done

### Remove options from positional parameters (Удаление параметров из позиционных параметров)
shift $(( OPTIND - 1 ))

### Prevent running installer from repository folder (Запретить запуск установщика из папки репозитория)
CHECK_GITHUB=(.git .github .gitignore README.md STATS.md LICENSE)

for FILE in "${CHECK_GITHUB[@]}"; do
    if [[ -f ${FILE} || -d ${FILE} ]]; then
        echo -e "${RED}Error: ${YELLOW}${MSG_ERROR_GIT}${NC}"
        rm -f old_vars.log; _exit_msg; exit 1
    fi
done

#             START SCRIPT - IMPORT SOURCES - GET USER VARIABLES
#             ЗАПУСК СКРИПТА - ИМПОРТ ИСТОЧНИКОВ-ПОЛУЧЕНИЕ ПОЛЬЗОВАТЕЛЬСКИХ ПЕРЕМЕННЫХ
# ============================================================================
# Here we check internet connection before downloading and importing sources.
#
# Sources are sorted by type:
#
#     - Arch Linux paquages    <src/apps>
#     - archboot scripts       <src/arch>
#     - config files           <src/conf>
#     - archboot language      <locale>
#
# Then we can ask user variables and we properly store them. In case of DE/WM
# we import additional sources like display manager and we get GPU controller
# to properly set appropriate drivers with hardware video acceleration.
#
# Kernel mode setting support: in this case no GPU Driver will be installed.
# ============================================================================
# Здесь мы проверяем подключение к интернету перед загрузкой и импортом источников.
#
# Источники отсортированы по типу:
#
# - #- Arch Linux packages <src / apps>
# - # - арка загрузки скриптов <вход/архитектура>
# - конфигурационные файлы <src / conf>
# - язык archboot < locale>
#
# Затем мы можем задать пользовательские переменные и правильно их хранить. В случае DE/WM
# мы импортируем дополнительные источники, такие как display manager, и получаем контроллер GPU
# чтобы правильно установить соответствующие драйверы с аппаратным ускорением видео.
#
# Поддержка настройки режима ядра: в этом случае драйвер GPU не будет установлен.
# ============================================================================

### Set installer language (Выбрать язык установщика)
_check wget -q "${URL}/locale/${ARCHBOOT_LANG,,}"
_check source "./${ARCHBOOT_LANG,,}"

### Display banner (Дисплей баннер)
_archboot_banner

### Check internet connection (Проверьте подключение к интернету)
_info "${MSG_INTERNET}"
INTERNET=$( ping -c 1 archlinux.org )

if [[ ${INTERNET} ]]; then
    _note "congratulations, you are connected to Internet!"
else
    _error "you are not connected to Internet!"
fi

### Download base sources (Скачать базовые источники)
_confirm "${MSG_CONFIRM_DL_SOURCES}"

case ${CONFIRM} in
    y|Y|yes|Yes|YES)
        _info "${MSG_DL_SRC_BASE}"
        _wget "${URL}/src/arch/base"           # to install base system (для установки базовой системы)
        _wget "${URL}/src/arch/bootloader"     # to install bootloader (для установки загрузчика)
        _wget "${URL}/src/arch/firmware"       # to get firmware (чтобы получить прошивку)
        _wget "${URL}/src/arch/mirrorlist"     # to get mirrorlist & timezone (чтобы получить mirrorlist и часовой пояс)
        _wget "${URL}/src/arch/mounting"       # to mount partitions & swap (для монтирования раздела подкачки)
        _wget "${URL}/src/arch/partitioning"   # to set/create partitions (для установки / создания разделов)
        _wget "${URL}/src/arch/user"           # to get user variables (чтобы получить пользовательские переменные)
        _wget "${URL}/src/apps/system_apps"    # to get system apps (чтобы получить системные приложения)
        _wget "${URL}/src/conf/language"       # to get language codes (чтобы получить языковые коды)
        _wget "${URL}/src/conf/timezone"       # to get timezone codes (чтобы получить коды часовых поясов)
        ;;
    *) _cleanup; _exit_msg; exit 0
esac

### Import base sources (Импорт базовых источников)
_info "${MSG_IMPORT_SRC_BASE}"
BASE_SOURCES=\
(base bootloader firmware mirrorlist mounting partitioning user system_apps)

for SOURCE in "${BASE_SOURCES[@]}"; do
    _check source "./${SOURCE}"
done
echo "-> ${MSG_DONE}"

### Get user variables (src/arch/user) (Получение пользовательских переменных)
_get_user_variables

### Desktop Environment (окружение рабочего стола)
if [[ ${DESKTOP} ]]; then

    # Download desktop sources (Скачать настольные источники)
    _info "${MSG_DL_SRC_DE}"
    _wget "${URL}/src/arch/desktop"            # to install DE/WM (для установки DE/WM)
    _wget "${URL}/src/arch/display"            # to install Display Manager (для установки дисплейного менеджера)
    _wget "${URL}/src/arch/gpu_driver"         # to get/install GPU Driver (чтобы получить/установить драйвер видеокарты)
    _wget "${URL}/src/apps/desktop_apps"       # to get Desktop apps (чтобы получить настольные приложения)
    _wget "${URL}/src/apps/display_apps"       # to get Display Manager apps (чтобы получить приложения Display Manager)
    _wget "${URL}/src/apps/gpu_apps"           # to get GPU Driver apps (чтобы получить драйвер графического приложения)
    _wget "${URL}/src/conf/00-keyboard.conf"   # to set keyboard layout (чтобы установить раскладку клавиатуры)

    # Import desktop sources (Импорт настольных источников)
    _info "${MSG_IMPORT_SRC_DE}"
    DE_SOURCES=(desktop display gpu_driver desktop_apps display_apps gpu_apps)

    for SOURCE in "${DE_SOURCES[@]}"; do
        _check source "./${SOURCE}"
    done
    echo "-> ${MSG_DONE}"

    # GPU driver (src/arch/gpu_driver) || Kernel mode setting
    # Драйвер GPU (src / arch/gpu_driver) / / Настройка режима ядра
    _note "${MSG_MODSETTING}"
    _confirm "${MSG_CONFIRM_GPU}"

    case ${CONFIRM} in
        y|Y|yes|Yes|YES) _get_gpu_driver
    esac
fi

#              PREPARE THE SYSTEM - FORMAT AND MOUNT PARTITIONS
#              ПОДГОТОВЬТЕ СИСТЕМУ - ФОРМАТИРУЙТЕ И МОНТИРУЙТЕ РАЗДЕЛЫ
# ============================================================================
# Here we detect firmware, processor and ntfs partition(s) to properly
# define partition settings, cpu microcode updates and ntfs support.
# Then we get fastest mirrors, user timezone and we properly define them.
# Then we configure live system clock (NTP) and we create installation logs.
#
# Finally we run partitioning, we activate SWAP and we mount the partitions.
# ============================================================================
# Здесь мы обнаруживаем, что прошивка, процессор и NTFS-разделы работают правильно
# определите параметры раздела, обновления микрокода процессора и поддержку ntfs.
# Затем мы получаем самые быстрые зеркала, пользовательский часовой пояс и правильно определяем их.
# Затем мы настраиваем live system clock (NTP) и создаем журналы установки.
#
# Наконец мы запускаем секционирование, активируем SWAP и монтируем разделы.
# ============================================================================

### Prepare the system (Подготовьте систему)
_firmware; _cpu; _ntfs            # (src/arch/firmware)
_mirrorlist; _timezone; _clock    # (src/arch/mirrorlist)

### Set logfiles (Установить файлы журналов)
_info "${MSG_SET_LOGS}"
DATETIME=$( _check date '+%d-%m-%Y_%Hh%M' )
INSTALL_LOG="${APPNAME}-${VERSION}_${DATETIME}.log"
INPUTS_LOG="${USER_NAME}_${DATETIME}.log"
_archboot_banner > "${INSTALL_LOG}"
_archboot_banner > "${INPUTS_LOG}"
echo "-> ${MSG_DONE}"

### Partitioning (src/arch/partitioning) (Разбиение)
_note "${MSG_CUSTOM_PART_NOTE}"
_confirm "${MSG_CONFIRM_DRIVE}"

case ${CONFIRM} in
    y|Y|yes|Yes|YES) _default_partitioning_scheme;;    # (default)
    *) _custom_partitioning_scheme                     # (custom)
esac

### Mount (src/arch/mounting) (Монтировать)
_mount_partitions
_note "${MSG_MOUNT}"
sleep 1

### Display user entries (so user can see them before running install)
### Отображение пользовательских записей (чтобы пользователь мог увидеть их перед запуском установки)
USER_ENTRIES=(USER_LANG TIMEZONE HOST_NAME USER_NAME LINUX_FW KERNEL \
DESKTOP DISPLAY_MAN GREETER AUR_HELPER POWER GPU_DRIVER HARD_VIDEO)
_info "${MSG_USER_ENTRIES}"

for ENTRY in "${USER_ENTRIES[@]}"; do
    if [[ ${!ENTRY} ]]; then
        echo -e "${BOLD}* ${ENTRY}: ${NC}${!ENTRY}"
    fi
done

#                         ARCH LINUX INSTALLATION (ARCH LINUX УСТАНОВКА)
# ============================================================================
# At this point system is ready, partitions are created, properly mounted
# and user variables stored, so now we can start Arch Linux installation.
# First step is to install base system and second to install bootloader.
# In case of desktop environment or window manager, we install GPU Drivers
# and Display Manager. We also install an AUR Helper (optional).
#
# We use <tee> to get installation logs of those steps </var/log/archboot>.
# If system won't start DE/WM after reboot, check the logs and open an issue.
# ============================================================================
# На данный момент система готова, разделы созданы, правильно смонтированы
# и пользовательские переменные сохранены, так что теперь мы можем начать установку Arch Linux.
# Первый шаг-это установка базовой системы, а второй - установка загрузчика.
# В случае окружения рабочего стола или оконного менеджера, то установите драйверы видеокарты
# и дисплейный менеджер. Мы также устанавливаем Aur Helper (опционально).
#
# # Мы используем <tee>, чтобы получить журналы установки этих шагов < / var / log/arch boot>.
# Если система не будет запускать DE / WM после перезагрузки, проверьте журналы и откройте проблему.
# ============================================================================

_confirm "${MSG_CONFIRM_ARCH}"

case ${CONFIRM} in
    y|Y|yes|Yes|YES)

        ### Arch Linux base system (src/arch/base, src/arch/bootloader)
        ### Arch Linux базы системы (src/arch/base, src/arch/bootloader)
        (_install_base; _install_bootloader) 2>&1 | tee -a "${INSTALL_LOG}"

        ### GPU Driver (src/arch/gpu_driver)
        ### Драйвер графического процессора (src/arch/gpu_driver)
        if [[ ${GPU_DRIVER} ]]; then
            (_install_gpu_driver) 2>&1 | tee -a "${INSTALL_LOG}"
        fi

        ### DE / WM / DM (src/arch/desktop, src/arch/display, src/arch/user)
        if [[ ${DESKTOP} ]]; then
            (_install_desktop_environment; _configure_desktop_environment; \
_install_display_manager; _enable_user_rights) 2>&1 | tee -a "${INSTALL_LOG}"
        fi

        ### Install AUR Helper (src/arch/base)
        ### Установите AUR Helper (src/arch/base)
        if [[ ${AUR_HELPER} ]]; then
            (_install_AUR_helper) 2>&1 | tee -a "${INSTALL_LOG}"
        fi

        ### Clean cache and unused dependencies (src/arch/base)
        ### Очистка кэша и неиспользуемых зависимостей (src/arch/base)
        (_clean_dependencies) 2>&1 | tee -a "${INSTALL_LOG}"

        ### Get user inputs logs (Получить входные данные пользователя)
        _info "${MSG_INPUTS_LOGS}"
        set | grep -v "MSG_\|A=\|B=\|C=\|D=\|ROOTPASSWD=\|USERPASSWD=\|\
RED=\|GREEN=\|YELLOW=\|BLUE=\|CYAN=\|NC=\|OPTION" > new_vars.log
        diff old_vars.log new_vars.log | grep "^>" >> "${INPUTS_LOG}"
        sed -i "$ d" "${INPUTS_LOG}"
        echo "-> ${MSG_DONE}"

        ### Move logs to system (Перемещение журналов в систему)
        _info "${MSG_MOVE_LOGS}"
        mkdir -v /mnt/var/log/"${APPNAME}"
        mv -v "${INSTALL_LOG}" "/mnt/var/log/${APPNAME}/"
        mv -v "${INPUTS_LOG}" "/mnt/var/log/${APPNAME}/"
        echo "-> ${MSG_DONE}"

        ### Success note (Заметка об успехе)
        _note "${MSG_ARCH_SUCCESS}"
        ;;
    *)
        ### Installation aborted (Установка прервана)
        _error "${MSG_ARCH_ABORTED}"
esac

#                   CLEANUP SOURCES AND UMOUNT PARTITIONS
#                   ОЧИСТКА ИСТОЧНИКОВ И РАЗМОНТИРОВАНИЕ РАЗДЕЛОВ
# ============================================================================
# And here we go! We can now cleanup sources, umount all partitions and
# reboot the computer to restart on our fresh Arch Linux installation.
#
# Telegram chat: t.me/archboot - Have fun, take care and give a star!
# ============================================================================
# И вот мы здесь! Теперь мы можем очистить исходники, размонтировать все разделы и
# перезагрузите компьютер, чтобы перезапустить нашу свежую установку Arch Linux.
#
# Telegram чат: t.me/archboot - веселитесь, берегите себя и дарите звезду!
# ============================================================================

_confirm "${MSG_CONFIRM_REBOOT}"

case ${CONFIRM} in
    y|Y|yes|Yes|YES) _cleanup; _exit_msg; _reboot;;
    *) _cleanup; _exit_msg; exit 0
esac

# archboot - Arch Linux Installer by grm34 under Apache License 2.0
# ============================================================================
